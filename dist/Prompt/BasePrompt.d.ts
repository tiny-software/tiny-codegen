import { Config } from "../Config";
import { Prompt } from "./types";
export declare abstract class BasePrompt {
    protected type: Prompt.PromptQuestion["type"];
    protected name: Prompt.PromptQuestion["name"];
    protected message: Prompt.PromptQuestion["message"];
    protected default?: Prompt.PromptQuestion["default"];
    protected prefix?: Prompt.PromptQuestion["prefix"];
    protected suffix?: Prompt.PromptQuestion["suffix"];
    protected filter?: Prompt.PromptQuestion["filter"];
    protected when?: Prompt.PromptQuestion["when"];
    protected parser?: Prompt.PromptQuestion["parser"];
    protected validate?(input: any, config: Record<string, unknown>, answers?: any): string | boolean | Promise<string | boolean>;
    constructor(name: Prompt.PromptQuestion["name"], type: Prompt.PromptQuestion["type"], message: Prompt.PromptQuestion["message"], defaultValue?: Prompt.PromptQuestion["default"], prefix?: string, suffix?: string);
    getName(): string;
    getType(): "password" | "input" | "list" | "checkbox" | "confirm";
    getMessage(): string | ((answers: any, config: Record<string, unknown>) => string);
    getDefault(): string | number | boolean | [] | ((answers: any, config: Record<string, unknown>) => string);
    getPrefix(): string;
    getSuffix(): string;
    getFilter(): (input: any, answers: any, config: Record<string, unknown>) => any;
    getWhen(): (answers: any, config: Record<string, unknown>) => boolean;
    getParser(): Prompt.Parser<any>;
    getValidate(): (input: any, config: Record<string, unknown>, answers?: any) => string | boolean | Promise<string | boolean>;
    hasParser(): boolean;
    hasValidate(): boolean;
    hasWhen(): boolean;
    hasDefault(): boolean;
    hasFilter(): boolean;
    hasPrefix(): boolean;
    hasSuffix(): boolean;
    setParser(parser: Prompt.PromptQuestion["parser"]): this;
    setValidate(validate: Prompt.PromptQuestion["validate"]): this;
    parseMethods(config: Config): void;
    private parseValidate;
    private parseWhen;
    private parseFilter;
    private parseDefault;
    setWhen(when: Prompt.PromptQuestion["when"]): this;
    setDefault(defaultValue: Prompt.PromptQuestion["default"]): this;
    setPrefix(prefix: Prompt.PromptQuestion["prefix"]): this;
    setSuffix(suffix: Prompt.PromptQuestion["suffix"]): this;
    setFilter(filter: Prompt.PromptQuestion["filter"]): this;
    getPrompt(): Prompt.PromptQuestion;
    abstract isValid(): boolean;
}
